// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: youtube.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from youtube.proto</summary>
public static partial class YoutubeReflection {

  #region Descriptor
  /// <summary>File descriptor for youtube.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static YoutubeReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg15b3V0dWJlLnByb3RvIsIBCgxTZWFyY2hQYXJhbXMSJwoGU29ydEJ5GAEg",
          "ASgOMhcuU2VhcmNoUGFyYW1zLlNvcnRGaWVsZBIfCgdGaWx0ZXJzGAIgASgL",
          "Mg4uU2VhcmNoRmlsdGVycxIfCgpRdWVyeUZsYWdzGAggASgLMgsuUXVlcnlG",
          "bGFncyJHCglTb3J0RmllbGQSDQoJUkVMRVZBTkNFEAASCgoGUkFUSU5HEAES",
          "DwoLVVBMT0FEX0RBVEUQAhIOCgpWSUVXX0NPVU5UEAMinAQKDVNlYXJjaEZp",
          "bHRlcnMSLQoKVXBsb2FkZWRJbhgBIAEoDjIZLlNlYXJjaEZpbHRlcnMuVXBs",
          "b2FkRGF0ZRIlCgRUeXBlGAIgASgOMhcuU2VhcmNoRmlsdGVycy5JdGVtVHlw",
          "ZRIuCghEdXJhdGlvbhgDIAEoDjIcLlNlYXJjaEZpbHRlcnMuVmlkZW9EdXJh",
          "dGlvbhIKCgJIZBgEIAEoCBIRCglTdWJ0aXRsZXMYBSABKAgSFwoPQ3JlYXRp",
          "dmVDb21tb25zGAYgASgIEhQKDFJlc29sdXRpb24zRBgHIAEoCBIMCgRMaXZl",
          "GAggASgIEhEKCVB1cmNoYXNlZBgJIAEoCBIUCgxSZXNvbHV0aW9uNEsYDiAB",
          "KAgSDQoFVnIzNjAYDyABKAgSEAoITG9jYXRpb24YFyABKAgSCwoDSGRyGBkg",
          "ASgIEg0KBVZyMTgwGBogASgIIlQKClVwbG9hZERhdGUSDQoJTEFTVF9IT1VS",
          "EAESCQoFVE9EQVkQAhINCglUSElTX1dFRUsQAxIOCgpUSElTX01PTlRIEAQS",
          "DQoJVEhJU19ZRUFSEAUiOwoISXRlbVR5cGUSCQoFVklERU8QARILCgdDSEFO",
          "TkVMEAISDAoIUExBWUxJU1QQAxIJCgVNT1ZJRRAEIjAKDVZpZGVvRHVyYXRp",
          "b24SCQoFU0hPUlQQARIICgRMT05HEAISCgoGTUVESVVNEAMiIQoKUXVlcnlG",
          "bGFncxITCgtFeGFjdFNlYXJjaBgBIAEoCA=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::SearchParams), global::SearchParams.Parser, new[]{ "SortBy", "Filters", "QueryFlags" }, null, new[]{ typeof(global::SearchParams.Types.SortField) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SearchFilters), global::SearchFilters.Parser, new[]{ "UploadedIn", "Type", "Duration", "Hd", "Subtitles", "CreativeCommons", "Resolution3D", "Live", "Purchased", "Resolution4K", "Vr360", "Location", "Hdr", "Vr180" }, null, new[]{ typeof(global::SearchFilters.Types.UploadDate), typeof(global::SearchFilters.Types.ItemType), typeof(global::SearchFilters.Types.VideoDuration) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::QueryFlags), global::QueryFlags.Parser, new[]{ "ExactSearch" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class SearchParams : pb::IMessage<SearchParams> {
  private static readonly pb::MessageParser<SearchParams> _parser = new pb::MessageParser<SearchParams>(() => new SearchParams());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SearchParams> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::YoutubeReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SearchParams() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SearchParams(SearchParams other) : this() {
    _hasBits0 = other._hasBits0;
    sortBy_ = other.sortBy_;
    filters_ = other.filters_ != null ? other.filters_.Clone() : null;
    queryFlags_ = other.queryFlags_ != null ? other.queryFlags_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SearchParams Clone() {
    return new SearchParams(this);
  }

  /// <summary>Field number for the "SortBy" field.</summary>
  public const int SortByFieldNumber = 1;
  private readonly static global::SearchParams.Types.SortField SortByDefaultValue = global::SearchParams.Types.SortField.Relevance;

  private global::SearchParams.Types.SortField sortBy_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SearchParams.Types.SortField SortBy {
    get { if ((_hasBits0 & 1) != 0) { return sortBy_; } else { return SortByDefaultValue; } }
    set {
      _hasBits0 |= 1;
      sortBy_ = value;
    }
  }
  /// <summary>Gets whether the "SortBy" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSortBy {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "SortBy" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSortBy() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "Filters" field.</summary>
  public const int FiltersFieldNumber = 2;
  private global::SearchFilters filters_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SearchFilters Filters {
    get { return filters_; }
    set {
      filters_ = value;
    }
  }

  /// <summary>Field number for the "QueryFlags" field.</summary>
  public const int QueryFlagsFieldNumber = 8;
  private global::QueryFlags queryFlags_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::QueryFlags QueryFlags {
    get { return queryFlags_; }
    set {
      queryFlags_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SearchParams);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SearchParams other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SortBy != other.SortBy) return false;
    if (!object.Equals(Filters, other.Filters)) return false;
    if (!object.Equals(QueryFlags, other.QueryFlags)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasSortBy) hash ^= SortBy.GetHashCode();
    if (filters_ != null) hash ^= Filters.GetHashCode();
    if (queryFlags_ != null) hash ^= QueryFlags.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasSortBy) {
      output.WriteRawTag(8);
      output.WriteEnum((int) SortBy);
    }
    if (filters_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Filters);
    }
    if (queryFlags_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(QueryFlags);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasSortBy) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SortBy);
    }
    if (filters_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Filters);
    }
    if (queryFlags_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(QueryFlags);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SearchParams other) {
    if (other == null) {
      return;
    }
    if (other.HasSortBy) {
      SortBy = other.SortBy;
    }
    if (other.filters_ != null) {
      if (filters_ == null) {
        Filters = new global::SearchFilters();
      }
      Filters.MergeFrom(other.Filters);
    }
    if (other.queryFlags_ != null) {
      if (queryFlags_ == null) {
        QueryFlags = new global::QueryFlags();
      }
      QueryFlags.MergeFrom(other.QueryFlags);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          SortBy = (global::SearchParams.Types.SortField) input.ReadEnum();
          break;
        }
        case 18: {
          if (filters_ == null) {
            Filters = new global::SearchFilters();
          }
          input.ReadMessage(Filters);
          break;
        }
        case 66: {
          if (queryFlags_ == null) {
            QueryFlags = new global::QueryFlags();
          }
          input.ReadMessage(QueryFlags);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the SearchParams message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum SortField {
      [pbr::OriginalName("RELEVANCE")] Relevance = 0,
      [pbr::OriginalName("RATING")] Rating = 1,
      [pbr::OriginalName("UPLOAD_DATE")] UploadDate = 2,
      [pbr::OriginalName("VIEW_COUNT")] ViewCount = 3,
    }

  }
  #endregion

}

public sealed partial class SearchFilters : pb::IMessage<SearchFilters> {
  private static readonly pb::MessageParser<SearchFilters> _parser = new pb::MessageParser<SearchFilters>(() => new SearchFilters());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SearchFilters> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::YoutubeReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SearchFilters() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SearchFilters(SearchFilters other) : this() {
    _hasBits0 = other._hasBits0;
    uploadedIn_ = other.uploadedIn_;
    type_ = other.type_;
    duration_ = other.duration_;
    hd_ = other.hd_;
    subtitles_ = other.subtitles_;
    creativeCommons_ = other.creativeCommons_;
    resolution3D_ = other.resolution3D_;
    live_ = other.live_;
    purchased_ = other.purchased_;
    resolution4K_ = other.resolution4K_;
    vr360_ = other.vr360_;
    location_ = other.location_;
    hdr_ = other.hdr_;
    vr180_ = other.vr180_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SearchFilters Clone() {
    return new SearchFilters(this);
  }

  /// <summary>Field number for the "UploadedIn" field.</summary>
  public const int UploadedInFieldNumber = 1;
  private readonly static global::SearchFilters.Types.UploadDate UploadedInDefaultValue = global::SearchFilters.Types.UploadDate.LastHour;

  private global::SearchFilters.Types.UploadDate uploadedIn_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SearchFilters.Types.UploadDate UploadedIn {
    get { if ((_hasBits0 & 1) != 0) { return uploadedIn_; } else { return UploadedInDefaultValue; } }
    set {
      _hasBits0 |= 1;
      uploadedIn_ = value;
    }
  }
  /// <summary>Gets whether the "UploadedIn" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUploadedIn {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "UploadedIn" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUploadedIn() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "Type" field.</summary>
  public const int TypeFieldNumber = 2;
  private readonly static global::SearchFilters.Types.ItemType TypeDefaultValue = global::SearchFilters.Types.ItemType.Video;

  private global::SearchFilters.Types.ItemType type_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SearchFilters.Types.ItemType Type {
    get { if ((_hasBits0 & 2) != 0) { return type_; } else { return TypeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      type_ = value;
    }
  }
  /// <summary>Gets whether the "Type" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasType {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "Type" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearType() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "Duration" field.</summary>
  public const int DurationFieldNumber = 3;
  private readonly static global::SearchFilters.Types.VideoDuration DurationDefaultValue = global::SearchFilters.Types.VideoDuration.Short;

  private global::SearchFilters.Types.VideoDuration duration_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SearchFilters.Types.VideoDuration Duration {
    get { if ((_hasBits0 & 4) != 0) { return duration_; } else { return DurationDefaultValue; } }
    set {
      _hasBits0 |= 4;
      duration_ = value;
    }
  }
  /// <summary>Gets whether the "Duration" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDuration {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "Duration" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDuration() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "Hd" field.</summary>
  public const int HdFieldNumber = 4;
  private readonly static bool HdDefaultValue = false;

  private bool hd_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Hd {
    get { if ((_hasBits0 & 8) != 0) { return hd_; } else { return HdDefaultValue; } }
    set {
      _hasBits0 |= 8;
      hd_ = value;
    }
  }
  /// <summary>Gets whether the "Hd" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasHd {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "Hd" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearHd() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "Subtitles" field.</summary>
  public const int SubtitlesFieldNumber = 5;
  private readonly static bool SubtitlesDefaultValue = false;

  private bool subtitles_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Subtitles {
    get { if ((_hasBits0 & 16) != 0) { return subtitles_; } else { return SubtitlesDefaultValue; } }
    set {
      _hasBits0 |= 16;
      subtitles_ = value;
    }
  }
  /// <summary>Gets whether the "Subtitles" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSubtitles {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "Subtitles" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSubtitles() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "CreativeCommons" field.</summary>
  public const int CreativeCommonsFieldNumber = 6;
  private readonly static bool CreativeCommonsDefaultValue = false;

  private bool creativeCommons_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool CreativeCommons {
    get { if ((_hasBits0 & 32) != 0) { return creativeCommons_; } else { return CreativeCommonsDefaultValue; } }
    set {
      _hasBits0 |= 32;
      creativeCommons_ = value;
    }
  }
  /// <summary>Gets whether the "CreativeCommons" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCreativeCommons {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "CreativeCommons" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCreativeCommons() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "Resolution3D" field.</summary>
  public const int Resolution3DFieldNumber = 7;
  private readonly static bool Resolution3DDefaultValue = false;

  private bool resolution3D_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Resolution3D {
    get { if ((_hasBits0 & 64) != 0) { return resolution3D_; } else { return Resolution3DDefaultValue; } }
    set {
      _hasBits0 |= 64;
      resolution3D_ = value;
    }
  }
  /// <summary>Gets whether the "Resolution3D" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasResolution3D {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "Resolution3D" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearResolution3D() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "Live" field.</summary>
  public const int LiveFieldNumber = 8;
  private readonly static bool LiveDefaultValue = false;

  private bool live_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Live {
    get { if ((_hasBits0 & 128) != 0) { return live_; } else { return LiveDefaultValue; } }
    set {
      _hasBits0 |= 128;
      live_ = value;
    }
  }
  /// <summary>Gets whether the "Live" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasLive {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "Live" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearLive() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "Purchased" field.</summary>
  public const int PurchasedFieldNumber = 9;
  private readonly static bool PurchasedDefaultValue = false;

  private bool purchased_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Purchased {
    get { if ((_hasBits0 & 256) != 0) { return purchased_; } else { return PurchasedDefaultValue; } }
    set {
      _hasBits0 |= 256;
      purchased_ = value;
    }
  }
  /// <summary>Gets whether the "Purchased" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPurchased {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "Purchased" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPurchased() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "Resolution4K" field.</summary>
  public const int Resolution4KFieldNumber = 14;
  private readonly static bool Resolution4KDefaultValue = false;

  private bool resolution4K_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Resolution4K {
    get { if ((_hasBits0 & 512) != 0) { return resolution4K_; } else { return Resolution4KDefaultValue; } }
    set {
      _hasBits0 |= 512;
      resolution4K_ = value;
    }
  }
  /// <summary>Gets whether the "Resolution4K" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasResolution4K {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "Resolution4K" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearResolution4K() {
    _hasBits0 &= ~512;
  }

  /// <summary>Field number for the "Vr360" field.</summary>
  public const int Vr360FieldNumber = 15;
  private readonly static bool Vr360DefaultValue = false;

  private bool vr360_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Vr360 {
    get { if ((_hasBits0 & 1024) != 0) { return vr360_; } else { return Vr360DefaultValue; } }
    set {
      _hasBits0 |= 1024;
      vr360_ = value;
    }
  }
  /// <summary>Gets whether the "Vr360" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVr360 {
    get { return (_hasBits0 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "Vr360" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVr360() {
    _hasBits0 &= ~1024;
  }

  /// <summary>Field number for the "Location" field.</summary>
  public const int LocationFieldNumber = 23;
  private readonly static bool LocationDefaultValue = false;

  private bool location_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Location {
    get { if ((_hasBits0 & 2048) != 0) { return location_; } else { return LocationDefaultValue; } }
    set {
      _hasBits0 |= 2048;
      location_ = value;
    }
  }
  /// <summary>Gets whether the "Location" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasLocation {
    get { return (_hasBits0 & 2048) != 0; }
  }
  /// <summary>Clears the value of the "Location" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearLocation() {
    _hasBits0 &= ~2048;
  }

  /// <summary>Field number for the "Hdr" field.</summary>
  public const int HdrFieldNumber = 25;
  private readonly static bool HdrDefaultValue = false;

  private bool hdr_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Hdr {
    get { if ((_hasBits0 & 4096) != 0) { return hdr_; } else { return HdrDefaultValue; } }
    set {
      _hasBits0 |= 4096;
      hdr_ = value;
    }
  }
  /// <summary>Gets whether the "Hdr" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasHdr {
    get { return (_hasBits0 & 4096) != 0; }
  }
  /// <summary>Clears the value of the "Hdr" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearHdr() {
    _hasBits0 &= ~4096;
  }

  /// <summary>Field number for the "Vr180" field.</summary>
  public const int Vr180FieldNumber = 26;
  private readonly static bool Vr180DefaultValue = false;

  private bool vr180_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Vr180 {
    get { if ((_hasBits0 & 8192) != 0) { return vr180_; } else { return Vr180DefaultValue; } }
    set {
      _hasBits0 |= 8192;
      vr180_ = value;
    }
  }
  /// <summary>Gets whether the "Vr180" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVr180 {
    get { return (_hasBits0 & 8192) != 0; }
  }
  /// <summary>Clears the value of the "Vr180" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVr180() {
    _hasBits0 &= ~8192;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SearchFilters);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SearchFilters other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UploadedIn != other.UploadedIn) return false;
    if (Type != other.Type) return false;
    if (Duration != other.Duration) return false;
    if (Hd != other.Hd) return false;
    if (Subtitles != other.Subtitles) return false;
    if (CreativeCommons != other.CreativeCommons) return false;
    if (Resolution3D != other.Resolution3D) return false;
    if (Live != other.Live) return false;
    if (Purchased != other.Purchased) return false;
    if (Resolution4K != other.Resolution4K) return false;
    if (Vr360 != other.Vr360) return false;
    if (Location != other.Location) return false;
    if (Hdr != other.Hdr) return false;
    if (Vr180 != other.Vr180) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasUploadedIn) hash ^= UploadedIn.GetHashCode();
    if (HasType) hash ^= Type.GetHashCode();
    if (HasDuration) hash ^= Duration.GetHashCode();
    if (HasHd) hash ^= Hd.GetHashCode();
    if (HasSubtitles) hash ^= Subtitles.GetHashCode();
    if (HasCreativeCommons) hash ^= CreativeCommons.GetHashCode();
    if (HasResolution3D) hash ^= Resolution3D.GetHashCode();
    if (HasLive) hash ^= Live.GetHashCode();
    if (HasPurchased) hash ^= Purchased.GetHashCode();
    if (HasResolution4K) hash ^= Resolution4K.GetHashCode();
    if (HasVr360) hash ^= Vr360.GetHashCode();
    if (HasLocation) hash ^= Location.GetHashCode();
    if (HasHdr) hash ^= Hdr.GetHashCode();
    if (HasVr180) hash ^= Vr180.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasUploadedIn) {
      output.WriteRawTag(8);
      output.WriteEnum((int) UploadedIn);
    }
    if (HasType) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Type);
    }
    if (HasDuration) {
      output.WriteRawTag(24);
      output.WriteEnum((int) Duration);
    }
    if (HasHd) {
      output.WriteRawTag(32);
      output.WriteBool(Hd);
    }
    if (HasSubtitles) {
      output.WriteRawTag(40);
      output.WriteBool(Subtitles);
    }
    if (HasCreativeCommons) {
      output.WriteRawTag(48);
      output.WriteBool(CreativeCommons);
    }
    if (HasResolution3D) {
      output.WriteRawTag(56);
      output.WriteBool(Resolution3D);
    }
    if (HasLive) {
      output.WriteRawTag(64);
      output.WriteBool(Live);
    }
    if (HasPurchased) {
      output.WriteRawTag(72);
      output.WriteBool(Purchased);
    }
    if (HasResolution4K) {
      output.WriteRawTag(112);
      output.WriteBool(Resolution4K);
    }
    if (HasVr360) {
      output.WriteRawTag(120);
      output.WriteBool(Vr360);
    }
    if (HasLocation) {
      output.WriteRawTag(184, 1);
      output.WriteBool(Location);
    }
    if (HasHdr) {
      output.WriteRawTag(200, 1);
      output.WriteBool(Hdr);
    }
    if (HasVr180) {
      output.WriteRawTag(208, 1);
      output.WriteBool(Vr180);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasUploadedIn) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) UploadedIn);
    }
    if (HasType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (HasDuration) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Duration);
    }
    if (HasHd) {
      size += 1 + 1;
    }
    if (HasSubtitles) {
      size += 1 + 1;
    }
    if (HasCreativeCommons) {
      size += 1 + 1;
    }
    if (HasResolution3D) {
      size += 1 + 1;
    }
    if (HasLive) {
      size += 1 + 1;
    }
    if (HasPurchased) {
      size += 1 + 1;
    }
    if (HasResolution4K) {
      size += 1 + 1;
    }
    if (HasVr360) {
      size += 1 + 1;
    }
    if (HasLocation) {
      size += 2 + 1;
    }
    if (HasHdr) {
      size += 2 + 1;
    }
    if (HasVr180) {
      size += 2 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SearchFilters other) {
    if (other == null) {
      return;
    }
    if (other.HasUploadedIn) {
      UploadedIn = other.UploadedIn;
    }
    if (other.HasType) {
      Type = other.Type;
    }
    if (other.HasDuration) {
      Duration = other.Duration;
    }
    if (other.HasHd) {
      Hd = other.Hd;
    }
    if (other.HasSubtitles) {
      Subtitles = other.Subtitles;
    }
    if (other.HasCreativeCommons) {
      CreativeCommons = other.CreativeCommons;
    }
    if (other.HasResolution3D) {
      Resolution3D = other.Resolution3D;
    }
    if (other.HasLive) {
      Live = other.Live;
    }
    if (other.HasPurchased) {
      Purchased = other.Purchased;
    }
    if (other.HasResolution4K) {
      Resolution4K = other.Resolution4K;
    }
    if (other.HasVr360) {
      Vr360 = other.Vr360;
    }
    if (other.HasLocation) {
      Location = other.Location;
    }
    if (other.HasHdr) {
      Hdr = other.Hdr;
    }
    if (other.HasVr180) {
      Vr180 = other.Vr180;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          UploadedIn = (global::SearchFilters.Types.UploadDate) input.ReadEnum();
          break;
        }
        case 16: {
          Type = (global::SearchFilters.Types.ItemType) input.ReadEnum();
          break;
        }
        case 24: {
          Duration = (global::SearchFilters.Types.VideoDuration) input.ReadEnum();
          break;
        }
        case 32: {
          Hd = input.ReadBool();
          break;
        }
        case 40: {
          Subtitles = input.ReadBool();
          break;
        }
        case 48: {
          CreativeCommons = input.ReadBool();
          break;
        }
        case 56: {
          Resolution3D = input.ReadBool();
          break;
        }
        case 64: {
          Live = input.ReadBool();
          break;
        }
        case 72: {
          Purchased = input.ReadBool();
          break;
        }
        case 112: {
          Resolution4K = input.ReadBool();
          break;
        }
        case 120: {
          Vr360 = input.ReadBool();
          break;
        }
        case 184: {
          Location = input.ReadBool();
          break;
        }
        case 200: {
          Hdr = input.ReadBool();
          break;
        }
        case 208: {
          Vr180 = input.ReadBool();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the SearchFilters message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum UploadDate {
      [pbr::OriginalName("LAST_HOUR")] LastHour = 1,
      [pbr::OriginalName("TODAY")] Today = 2,
      [pbr::OriginalName("THIS_WEEK")] ThisWeek = 3,
      [pbr::OriginalName("THIS_MONTH")] ThisMonth = 4,
      [pbr::OriginalName("THIS_YEAR")] ThisYear = 5,
    }

    public enum ItemType {
      [pbr::OriginalName("VIDEO")] Video = 1,
      [pbr::OriginalName("CHANNEL")] Channel = 2,
      [pbr::OriginalName("PLAYLIST")] Playlist = 3,
      [pbr::OriginalName("MOVIE")] Movie = 4,
    }

    public enum VideoDuration {
      [pbr::OriginalName("SHORT")] Short = 1,
      [pbr::OriginalName("LONG")] Long = 2,
      [pbr::OriginalName("MEDIUM")] Medium = 3,
    }

  }
  #endregion

}

public sealed partial class QueryFlags : pb::IMessage<QueryFlags> {
  private static readonly pb::MessageParser<QueryFlags> _parser = new pb::MessageParser<QueryFlags>(() => new QueryFlags());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<QueryFlags> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::YoutubeReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public QueryFlags() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public QueryFlags(QueryFlags other) : this() {
    _hasBits0 = other._hasBits0;
    exactSearch_ = other.exactSearch_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public QueryFlags Clone() {
    return new QueryFlags(this);
  }

  /// <summary>Field number for the "ExactSearch" field.</summary>
  public const int ExactSearchFieldNumber = 1;
  private readonly static bool ExactSearchDefaultValue = false;

  private bool exactSearch_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ExactSearch {
    get { if ((_hasBits0 & 1) != 0) { return exactSearch_; } else { return ExactSearchDefaultValue; } }
    set {
      _hasBits0 |= 1;
      exactSearch_ = value;
    }
  }
  /// <summary>Gets whether the "ExactSearch" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasExactSearch {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "ExactSearch" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearExactSearch() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as QueryFlags);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(QueryFlags other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ExactSearch != other.ExactSearch) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasExactSearch) hash ^= ExactSearch.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasExactSearch) {
      output.WriteRawTag(8);
      output.WriteBool(ExactSearch);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasExactSearch) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(QueryFlags other) {
    if (other == null) {
      return;
    }
    if (other.HasExactSearch) {
      ExactSearch = other.ExactSearch;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ExactSearch = input.ReadBool();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
